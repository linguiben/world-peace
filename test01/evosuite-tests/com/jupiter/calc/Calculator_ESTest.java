/*
 * This file was automatically generated by EvoSuite
 * Sat May 20 03:53:25 GMT 2023
 */

package com.jupiter.calc;

import com.jupiter.branch.LargeOrSmall;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import java.math.BigDecimal;
import java.math.BigInteger;

import static org.evosuite.runtime.EvoAssertions.verifyException;
import static org.junit.Assert.*;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Calculator_ESTest extends Calculator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(3315);
      LargeOrSmall largeOrSmall0 = new LargeOrSmall();
      Calculator calculator0 = new Calculator("h+R~", 3315, bigDecimal0, largeOrSmall0);
      calculator0.hashCode();
      assertEquals("Calculator(name=h+R~, mv=3315, indexValue=3315, largeOrSmall=LargeOrSmall(result=null))", calculator0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      calculator0.setMv(2217);
      Calculator calculator1 = new Calculator();
      boolean boolean0 = calculator0.equals(calculator1);
      assertEquals(2217, calculator0.getMv());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      String[] stringArray0 = new String[0];
      int int0 = calculator0.sum(stringArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Calculator calculator0 = new Calculator("3");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "3";
      stringArray0[1] = "3";
      stringArray0[2] = "3";
      int int0 = calculator0.sum(stringArray0);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      String string0 = calculator0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      LargeOrSmall largeOrSmall0 = new LargeOrSmall();
      Calculator calculator0 = new Calculator("", (-308), bigDecimal0, largeOrSmall0);
      calculator0.getName();
      assertEquals("Calculator(name=, mv=-308, indexValue=1, largeOrSmall=LargeOrSmall(result=null))", calculator0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(3315);
      LargeOrSmall largeOrSmall0 = new LargeOrSmall();
      Calculator calculator0 = new Calculator("h+R~", 3315, bigDecimal0, largeOrSmall0);
      int int0 = calculator0.getMv();
      assertEquals(3315, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      LargeOrSmall largeOrSmall0 = new LargeOrSmall();
      Calculator calculator0 = new Calculator("", (-308), bigDecimal0, largeOrSmall0);
      int int0 = calculator0.getMv();
      assertEquals((-308), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      LargeOrSmall largeOrSmall0 = new LargeOrSmall();
      calculator0.setLargeOrSmall(largeOrSmall0);
      LargeOrSmall largeOrSmall1 = calculator0.getLargeOrSmall();
      assertNull(largeOrSmall1.getResult());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LargeOrSmall largeOrSmall0 = new LargeOrSmall();
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      Calculator calculator0 = new Calculator("O[E;@d%TCd2M?", 70, bigDecimal0, largeOrSmall0);
      calculator0.getIndexValue();
      assertEquals("Calculator(name=O[E;@d%TCd2M?, mv=70, indexValue=0, largeOrSmall=LargeOrSmall(result=null))", calculator0.toString());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      BigDecimal bigDecimal0 = new BigDecimal((-766));
      calculator0.setIndexValue(bigDecimal0);
      BigDecimal bigDecimal1 = calculator0.getIndexValue();
      assertEquals((byte)2, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(1958L);
      LargeOrSmall largeOrSmall0 = new LargeOrSmall();
      Calculator calculator0 = new Calculator("o-,Y6t2]MOAlb*+k", (-4400), bigDecimal0, largeOrSmall0);
      calculator0.getIndexValue();
      assertEquals((-4400), calculator0.getMv());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LargeOrSmall largeOrSmall0 = new LargeOrSmall();
      Calculator calculator0 = new Calculator("IS=", 1, (BigDecimal) null, largeOrSmall0);
      LargeOrSmall.Small = null;
      calculator0.dice(1);
      assertEquals("Calculator(name=IS=, mv=1, indexValue=null, largeOrSmall=LargeOrSmall(result=null))", calculator0.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.valueOf((long) 6, 403);
      LargeOrSmall largeOrSmall0 = new LargeOrSmall();
      Calculator calculator0 = new Calculator("", 6, bigDecimal0, largeOrSmall0);
      LargeOrSmall.Large = "";
      calculator0.dice(6);
      assertEquals("Calculator(name=, mv=6, indexValue=6E-403, largeOrSmall=LargeOrSmall(result=))", calculator0.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Calculator calculator0 = new Calculator("WpC$");
      boolean boolean0 = calculator0.canEqual(calculator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      boolean boolean0 = calculator0.canEqual("A`*?:RZr=w1Ti@$No");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      String[] stringArray0 = new String[13];
      // Undeclared exception!
      try { 
        calculator0.sum(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      // Undeclared exception!
      try { 
        calculator0.sum((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jupiter.calc.Calculator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      LargeOrSmall largeOrSmall0 = new LargeOrSmall();
      calculator0.setLargeOrSmall(largeOrSmall0);
      // Undeclared exception!
      try { 
        calculator0.dice(2474);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jupiter.branch.LargeOrSmall", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      // Undeclared exception!
      try { 
        calculator0.dice(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jupiter.calc.Calculator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Calculator calculator0 = new Calculator("s7bsf%ZNb=^f|h");
      String string0 = calculator0.getName();
      assertEquals("s7bsf%ZNb=^f|h", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      BigDecimal bigDecimal0 = calculator0.getIndexValue();
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Calculator calculator0 = new Calculator("s7bsf%ZNb=^f|h");
      int int0 = calculator0.getMv();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Calculator calculator0 = new Calculator("s7bsf%ZNb=^f|h");
      LargeOrSmall largeOrSmall0 = calculator0.getLargeOrSmall();
      assertNull(largeOrSmall0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-1339";
      stringArray0[1] = "-1339";
      stringArray0[2] = "-1339";
      stringArray0[3] = "-1339";
      int int0 = calculator0.sum(stringArray0);
      assertEquals((-5356), int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      LargeOrSmall largeOrSmall0 = new LargeOrSmall();
      calculator0.setLargeOrSmall(largeOrSmall0);
      Calculator calculator1 = new Calculator();
      calculator1.setLargeOrSmall(largeOrSmall0);
      boolean boolean0 = calculator0.equals(calculator1);
      assertEquals("Calculator(name=null, mv=0, indexValue=null, largeOrSmall=LargeOrSmall(result=null))", calculator1.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      Calculator calculator1 = new Calculator();
      LargeOrSmall largeOrSmall0 = new LargeOrSmall();
      calculator1.setLargeOrSmall(largeOrSmall0);
      boolean boolean0 = calculator0.equals(calculator1);
      assertEquals("Calculator(name=null, mv=0, indexValue=null, largeOrSmall=LargeOrSmall(result=null))", calculator1.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      calculator0.setIndexValue(bigDecimal0);
      Calculator calculator1 = new Calculator();
      calculator1.setIndexValue(bigDecimal0);
      boolean boolean0 = calculator0.equals(calculator1);
      assertEquals("Calculator(name=null, mv=0, indexValue=1, largeOrSmall=null)", calculator1.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      Calculator calculator1 = new Calculator();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      calculator1.setIndexValue(bigDecimal0);
      boolean boolean0 = calculator0.equals(calculator1);
      assertEquals("Calculator(name=null, mv=0, indexValue=0, largeOrSmall=null)", calculator1.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      calculator0.setIndexValue(bigDecimal0);
      Calculator calculator1 = new Calculator();
      boolean boolean0 = calculator0.equals(calculator1);
      assertEquals("Calculator(name=null, mv=0, indexValue=1, largeOrSmall=null)", calculator0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      Calculator calculator1 = new Calculator("oztD");
      boolean boolean0 = calculator1.equals(calculator0);
      assertFalse(boolean0);
      assertEquals(0, calculator1.getMv());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      Calculator calculator1 = new Calculator("a5]=>R");
      boolean boolean0 = calculator0.equals(calculator1);
      assertFalse(boolean0);
      assertEquals(0, calculator1.getMv());
      assertFalse(calculator1.equals((Object)calculator0));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      LargeOrSmall largeOrSmall0 = new LargeOrSmall();
      Calculator calculator1 = new Calculator("", 9, bigDecimal0, largeOrSmall0);
      boolean boolean0 = calculator0.equals(calculator1);
      assertEquals("Calculator(name=, mv=9, indexValue=10, largeOrSmall=LargeOrSmall(result=null))", calculator1.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LargeOrSmall largeOrSmall0 = new LargeOrSmall();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Calculator calculator0 = new Calculator("Large", 1650, bigDecimal0, largeOrSmall0);
      boolean boolean0 = calculator0.equals(largeOrSmall0);
      assertFalse(boolean0);
      assertEquals("Calculator(name=Large, mv=1650, indexValue=10, largeOrSmall=LargeOrSmall(result=null))", calculator0.toString());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      boolean boolean0 = calculator0.equals(calculator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Calculator calculator0 = new Calculator("Jtn1ZC)S6ISzu");
      LargeOrSmall largeOrSmall0 = new LargeOrSmall();
      calculator0.setLargeOrSmall(largeOrSmall0);
      calculator0.hashCode();
      assertEquals("Calculator(name=Jtn1ZC)S6ISzu, mv=0, indexValue=null, largeOrSmall=LargeOrSmall(result=null))", calculator0.toString());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Calculator calculator0 = new Calculator("Jtn1ZC)S6ISzu");
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      calculator0.setIndexValue(bigDecimal0);
      calculator0.hashCode();
      assertEquals("Calculator(name=Jtn1ZC)S6ISzu, mv=0, indexValue=0, largeOrSmall=null)", calculator0.toString());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Calculator calculator0 = new Calculator("dice:{}, return:{}");
      calculator0.setName((String) null);
      calculator0.hashCode();
      assertEquals("Calculator(name=null, mv=0, indexValue=null, largeOrSmall=null)", calculator0.toString());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      String string0 = calculator0.toString();
      assertEquals("Calculator(name=null, mv=0, indexValue=null, largeOrSmall=null)", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      LargeOrSmall largeOrSmall0 = new LargeOrSmall();
      calculator0.setLargeOrSmall(largeOrSmall0);
      Calculator calculator1 = new Calculator();
      boolean boolean0 = calculator0.equals(calculator1);
      assertEquals("Calculator(name=null, mv=0, indexValue=null, largeOrSmall=LargeOrSmall(result=null))", calculator0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Calculator calculator0 = new Calculator("com.jupiter.calc.Calculator");
      Calculator calculator1 = new Calculator("com.jupiter.calc.Calculator");
      boolean boolean0 = calculator0.equals(calculator1);
      assertTrue(boolean0);
      assertEquals(0, calculator1.getMv());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LargeOrSmall largeOrSmall0 = new LargeOrSmall();
      Calculator calculator0 = new Calculator("IS=", 1, (BigDecimal) null, largeOrSmall0);
      calculator0.dice(1);
      assertEquals("Calculator(name=IS=, mv=1, indexValue=null, largeOrSmall=LargeOrSmall(result=Small))", calculator0.toString());
  }
}
